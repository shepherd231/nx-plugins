# Removes tags given by the `tags` input
# if results given by the `results` input
# contain any failure or cancellation of any processes.
#
# Note that this action does not revert commits made for the tag creation,
# so you need to revert them manually if needed

name: Remove tags

on:
  workflow_call:
    inputs:
      tags:
        description: 'Stringified JSON array of tags to remove'
        required: true
        type: string
      results:
        description: |
          Stringified JSON array of results.
          Each element is a enum value that indicates each processes' result. (See: https://docs.github.com/en/actions/learn-github-actions/contexts#jobs-context)
        required: true
        type: string

jobs:
  remove_tags:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Set-up git user
      - name: Set-up git user
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Sync the source to the latest commit
      - name: Sync source
        run: |
          set -e
          git fetch --unshallow
          git pull

      # Remove tags
      - name: Remove tags if needed
        env:
          tags_json: ${{ inputs.tags }}
          results_json: ${{ inputs.results }}
        run: |
          # Exit on error
          set -e

          # Parse the results input
          results=$(echo "${results_json}" | jq -r '.[]')

          # Check if removing tags is needed
          # 
          # Removing tags is needed if any of the processes
          # failed or cancelled.
          remove_needed=false
          for result in $results; do
            if [ "$result" = "failure" ] || [ "$result" = "cancelled" ]; then
              remove_needed=true
              break
            fi
          done

          # If removing tags is not needed, exit
          if [ "$remove_needed" = false ]; then
            echo "Removing tags is not needed. Exiting..."
            exit 0
          fi

          # Parse the tags input
          tags=$(echo "${tags_json}" | jq -r '.[]')

          # Remove the tags in local repository
          git tag -d $tags

          # Apply changes to remote repository
          git push origin --delete $tags
