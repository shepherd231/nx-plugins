name: Bump Version with Lerna

on:
  workflow_call:
    outputs:
      tags:
        description: "Strinified JSON array of tags pushed to the repository"
        value: ${{ jobs.bump_version.outputs.tags }}
      commit_hash:
        description: "Full commit hash of the commit made by lerna"
        value: ${{ jobs.bump_version.outputs.commit_hash }}

jobs:
  bump_version:
    name: Bump Version of Packages
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.get_tags.outputs.tags }}
      commit_hash: ${{ steps.get_hash.outputs.hash }}
    steps:
      # Check-out the repository
      - uses: actions/checkout@v4

      # Set-up git user
      - name: Set-up git user
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Sync the source to the latest commit
      - name: Sync source
        run: |
          set -e
          git fetch --unshallow
          git pull

      # Setup pnpm
      - uses: pnpm/action-setup@v2
        with:
          version: 8

      # Setup node
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "pnpm"

      # Install dependencies
      - run: pnpm install

      # Bump version for individual packages
      - run: pnpm lerna version --yes

      # Return pushed git tags
      - id: get_tags
        name: Get Tags
        run: |
          # Exit on error
          set -e

          # Gather tags from the commit made by lerna 
          # and output them as a space-separated string
          tags=$(
            git tag --contains "$(git log --pretty=format:'%h' | sed -n '2p')" | 
            xargs echo
          )
          # Output tags as a JSON array
          tags_json="$(jq --compact-output --null-input '$ARGS.positional' --args -- $tags)"

          # Output tags as a workflow output
          echo "tags=$tags_json" >> $GITHUB_OUTPUT

      - id: get_hash
        name: Get commit hash
        run: |
          # Exit on error
          set -e

          # Get full commit hash
          hash="$(git rev-parse HEAD)"

          # Output hash as a workflow output
          echo "hash=$hash" >> $GITHUB_OUTPUT
